{"version":3,"sources":["../../node_modules/@ithreat/use-mounted/dist/index.es.js","../../src/index.js","App.js","index.js"],"names":["isMounted","current","useMongoWatcher","collection","filter","callback","useState","config","setConfig","stream","useRef","attempt","useMounted","useEffect","Array","Object","iter","thisStream","str","setCollection","setFilter","JSON","setCallback","App","example","stringify","ReactDOM","render","document","getElementById"],"mappings":"6zDAEA,IAAI,EAAa,WACf,IAAIA,EAAY,kBAAO,GAOvB,OANA,qBAAU,WAER,OADAA,EAAUC,SAAU,EACb,WACL,OAAOD,EAAUC,SAAU,KAE5B,IACI,WACL,OAAOD,EAAUC,UCRRC,EAAkB,WAA2C,6DAAP,GAAjCC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,SAAoB,EACxCC,mBAAS,CAACH,WAAD,EAAaC,OAAb,EAAqBC,aADU,SAC9DE,EAD8D,KACtDC,EADsD,KAEhEC,EAASC,mBACTC,EAAUD,iBAAhB,GACMV,EAAYY,IAiClB,OA/BAC,qBAAU,WAAM,IACJV,EAAiCI,EAD7B,WACQH,EAAqBG,EAD7B,OACgBF,EAAaE,EAD7B,SAIZ,GAAKJ,GAAD,QAAwCW,kBAA0BV,EAAlE,SAAqFW,kBAAzF,QAGA,MACMC,IAASL,EARH,QAuBZ,OAZAR,iBAA8B,YACtBH,KAAegB,IAASL,EAA5B,SAEIF,UAAiBQ,EAAjBR,EACAA,qBAIAS,aAID,WACH,GAEID,cAGT,CA7BHJ,IA+BA,cAEIM,cAAe,mBAAgBX,GAAU,iCAAyBL,mBAElEiB,UAAW,mBAAYZ,GAAU,mBAAYa,KAAA,eAA2BA,eAAed,EAA1C,wBAAgFH,eAC7HkB,YAAa,mBAAcd,GAAU,iCAAyBH,oBChCvDkB,MAVH,KACV,MAAMC,EAAUtB,EAAgB,IAEhC,OACE,6BACGmB,KAAKI,UAAUD,KCFtBE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.b385f88a.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react';\n\nvar useMounted = function useMounted() {\n  var isMounted = useRef(false);\n  useEffect(function () {\n    isMounted.current = true;\n    return function () {\n      return isMounted.current = false;\n    };\n  }, []);\n  return function () {\n    return isMounted.current;\n  };\n};\n\nexport { useMounted };\n//# sourceMappingURL=index.es.js.map\n","import { useEffect, useRef, useState } from 'react';\r\nimport { useMounted } from '@ithreat/use-mounted';\r\n\r\nexport const useMongoWatcher = ({ collection, filter, callback } = {}) => {\r\n    const [ config, setConfig ] = useState({collection, filter, callback});\r\n    const stream = useRef();\r\n    const attempt = useRef(0);\r\n    const isMounted = useMounted();\r\n\r\n    useEffect(() => {\r\n        const { collection, filter, callback } = config;\r\n\r\n        // collection + callback required, filter must be non-empty\r\n        if (!collection || !callback || !filter || (Array.isArray(filter) && !filter.length) || !Object.entries(filter).length) return;\r\n\r\n        // local copy of the stream, for the unmount\r\n        let thisStream;\r\n        const iter = ++attempt.current;\r\n\r\n        // console.log(`connecting`, { iter, filter });\r\n        collection.watch(filter).then((str) => {\r\n            if (isMounted() && iter === attempt.current) {\r\n                // console.log(`watching`, { iter, filter });\r\n                stream.current = thisStream = str;\r\n                stream.current.onNext(callback);\r\n            }\r\n            else {\r\n                // console.log(`unmounted while connecting`);\r\n                str.close();\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            if (thisStream) {\r\n                // console.log(`unwatching`, { iter, filter })\r\n                thisStream.close();\r\n            }\r\n        }\r\n    }, [config]);\r\n\r\n    return {\r\n        ...config,\r\n        setCollection: (collection) => setConfig((config) => ({...config, collection})),\r\n        // only update the filter if it actually LOOKS different\r\n        setFilter: (filter) => setConfig((config) => JSON.stringify(filter) === JSON.stringify(config.filter) ? config : {...config, filter}),\r\n        setCallback: (callback) => setConfig((config) => ({...config, callback})),\r\n    };\r\n};\r\n\r\nexport default useMongoWatcher;","import React from 'react';\nimport { useMongoWatcher } from 'use-mongo-watcher';\n\nconst App = () => {\n  const example = useMongoWatcher({});\n\n  return (\n    <div>\n      {JSON.stringify(example)}\n    </div>\n  );\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}