{"version":3,"sources":["../../node_modules/@ithreat/use-mounted/dist/index.es.js","../../src/index.js","App.js","index.js"],"names":["useMongoWatcher","collection","filter","callback","useState","config","setConfig","stream","useRef","attempt","isMounted","current","useMounted","useEffect","Array","Object","iter","thisStream","str","setCollection","setFilter","JSON","setCallback","App","example","stringify","ReactDOM","render","document","getElementById"],"mappings":"6zDAEA,ICCaA,EAAkB,SAAC,GAAqC,IAAnCC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAAe,IACnCC,mBAAS,CAACH,WAAD,EAAaC,OAAb,EAAqBC,aADK,GACzDE,EADyD,KACjDC,EADiD,KAE3DC,EAASC,mBACTC,EAAUD,iBAAhB,GACME,EDLO,WACf,IAAIA,EAAY,kBAAO,GAOvB,OANA,qBAAU,WAER,OADAA,EAAUC,SAAU,EACb,WACL,OAAOD,EAAUC,SAAU,KAE5B,IACI,WACL,OAAOD,EAAUC,SCJCC,GAiClB,OA/BAC,qBAAU,WAAM,IACJZ,EAAiCI,EAD7B,WACQH,EAAqBG,EAD7B,OACgBF,EAAaE,EAD7B,SAIZ,GAAKH,KAAWY,kBAA0BZ,EAAtC,SAAyDa,kBAA7D,QAGA,MACMC,IAASP,EARH,QAuBZ,OAZAR,iBAA8B,YACtBS,KAAeM,IAASP,EAA5B,SAEIF,UAAiBU,EAAjBV,EACAA,qBAIAW,aAID,WACH,GAEID,cAGT,CA7BHJ,IA+BA,cAEIM,cAAe,mBAAgBb,GAAU,iCAAyBL,mBAElEmB,UAAW,mBAAYd,GAAU,mBAAYe,KAAA,eAA2BA,eAAehB,EAA1C,wBAAgFH,eAC7HoB,YAAa,mBAAchB,GAAU,iCAAyBH,oBChCvDoB,MAVH,KACV,MAAMC,EAAUxB,EAAgB,IAEhC,OACE,6BACGqB,KAAKI,UAAUD,KCFtBE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.0810e9be.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react';\n\nvar useMounted = function useMounted() {\n  var isMounted = useRef(false);\n  useEffect(function () {\n    isMounted.current = true;\n    return function () {\n      return isMounted.current = false;\n    };\n  }, []);\n  return function () {\n    return isMounted.current;\n  };\n};\n\nexport { useMounted };\n//# sourceMappingURL=index.es.js.map\n","import { useEffect, useRef, useState } from 'react';\nimport { useMounted } from '@ithreat/use-mounted';\n\nexport const useMongoWatcher = ({ collection, filter, callback }) => {\n    const [ config, setConfig ] = useState({collection, filter, callback});\n    const stream = useRef();\n    const attempt = useRef(0);\n    const isMounted = useMounted();\n\n    useEffect(() => {\n        const { collection, filter, callback } = config;\n\n        // filter must be non-empty\n        if (!filter || (Array.isArray(filter) && !filter.length) || !Object.entries(filter).length) return;\n\n        // local copy of the stream, for the unmount\n        let thisStream;\n        const iter = ++attempt.current;\n\n        // console.log(`connecting`, { iter, filter });\n        collection.watch(filter).then((str) => {\n            if (isMounted() && iter === attempt.current) {\n                // console.log(`watching`, { iter, filter });\n                stream.current = thisStream = str;\n                stream.current.onNext(callback);\n            }\n            else {\n                // console.log(`unmounted while connecting`);\n                str.close();\n            }\n        });\n\n        return () => {\n            if (thisStream) {\n                // console.log(`unwatching`, { iter, filter })\n                thisStream.close();\n            }\n        }\n    }, [config]);\n\n    return {\n        ...config,\n        setCollection: (collection) => setConfig((config) => ({...config, collection})),\n        // only update the filter if it actually LOOKS different\n        setFilter: (filter) => setConfig((config) => JSON.stringify(filter) === JSON.stringify(config.filter) ? config : {...config, filter}),\n        setCallback: (callback) => setConfig((config) => ({...config, callback})),\n    };\n};\n\nexport default useMongoWatcher;","import React from 'react';\nimport { useMongoWatcher } from 'use-mongo-watcher';\n\nconst App = () => {\n  const example = useMongoWatcher({});\n\n  return (\n    <div>\n      {JSON.stringify(example)}\n    </div>\n  );\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}