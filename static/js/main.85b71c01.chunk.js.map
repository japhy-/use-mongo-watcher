{"version":3,"sources":["../../src/index.js","../../node_modules/@ithreat/use-mounted/dist/index.es.js","App.js","index.js"],"names":["useMongoWatcher","collection","filter","callback","stream","useRef","attempt","isMounted","current","useMounted","useEffect","Array","Object","iter","console","thisStream","str","App","example","JSON","stringify","ReactDOM","render","document","getElementById"],"mappings":"wLAGaA,G,KAAkB,SAAC,GAAqC,IAAnCC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC5CC,EAASC,mBACTC,EAAUD,iBAAhB,GACME,ECJO,WACf,IAAIA,EAAY,kBAAO,GAOvB,OANA,qBAAU,WAER,OADAA,EAAUC,SAAU,EACb,WACL,OAAOD,EAAUC,SAAU,KAE5B,IACI,WACL,OAAOD,EAAUC,SDLCC,GA+BlB,OA7BAC,qBAAU,WAEN,GAAKR,KAAWS,kBAA0BT,EAAtC,SAAyDU,kBAA7D,QAGA,MACMC,IAASP,EAAf,QAeA,OAbAQ,yBAA0B,CAAED,KAAF,EAAQX,WAClCD,iBAA8B,YACtBM,KAAeM,IAASP,EAA5B,SACIQ,uBAAwB,CAAED,KAAF,EAAQX,WAChCE,UAAiBW,EAAjBX,EACAA,sBAGAU,0CACAE,cAID,WACH,GAEID,cAGT,CAACb,EA3BJQ,IA6BA,IExBWO,MAVH,KACV,MAAMC,EAAUlB,EAAgB,IAEhC,OACE,6BACGmB,KAAKC,UAAUF,KCFtBG,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.85b71c01.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useMounted } from '@ithreat/use-mounted';\n\nexport const useMongoWatcher = ({ collection, filter, callback }) => {\n    const stream = useRef();\n    const attempt = useRef(0);\n    const isMounted = useMounted();\n\n    useEffect(() => {\n        // filter must be non-empty\n        if (!filter || (Array.isArray(filter) && !filter.length) || !Object.entries(filter).length) return;\n\n        // local copy of the stream, for the unmount\n        let thisStream;\n        const iter = ++attempt.current;\n\n        console.log(`connecting`, { iter, filter });\n        collection.watch(filter).then((str) => {\n            if (isMounted() && iter === attempt.current) {\n                console.log(`watching`, { iter, filter });\n                stream.current = thisStream = str;\n                stream.current.onNext(callback);\n            }\n            else {\n                console.log(`unmounted while connecting`);\n                str.close();\n            }\n        });\n\n        return () => {\n            if (thisStream) {\n                // console.log(`unwatching`, { iter, filter, thisStream })\n                thisStream.close();\n            }\n        }\n    }, [filter, callback]);\n\n    return stream;\n};\n\nexport default useMongoWatcher;","import { useRef, useEffect } from 'react';\n\nvar useMounted = function useMounted() {\n  var isMounted = useRef(false);\n  useEffect(function () {\n    isMounted.current = true;\n    return function () {\n      return isMounted.current = false;\n    };\n  }, []);\n  return function () {\n    return isMounted.current;\n  };\n};\n\nexport { useMounted };\n//# sourceMappingURL=index.es.js.map\n","import React from 'react';\nimport { useMongoWatcher } from 'use-mongo-watcher';\n\nconst App = () => {\n  const example = useMongoWatcher({});\n\n  return (\n    <div>\n      {JSON.stringify(example)}\n    </div>\n  );\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}